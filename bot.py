# –ò—Å–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio, datetime, re
from aiogram import Dispatcher, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters.callback_data import CallbackQuery

# –î–æ–ø. –∏–º–ø–æ—Ä—Ç
from script import script
from config import TOKEN, ADMIN_GROUP, URL
from state import HelpForm, UserForm
from DataBase.database import db_connect, users
from Keyboards import reply, inline
from define import define, define_year
from get_netschool import Lessons
from search_school import search_school

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫
disp = Dispatcher()

#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
#
@disp.message(F.text == "/start")
async def command_start_handler(message: Message) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=reply.start_no_reg)
        await message.answer("–≠—Ç–æ Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã\n"
                        "—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –¥–Ω–µ–≤–Ω–∏–∫–æ–º\n\n"
                        "–ë–æ—Ç —É–º–µ–µ—Ç:\n"
                        "1Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏\n"
                        "2Ô∏è‚É£ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
                        "3Ô∏è‚É£ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
                        "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–∞–º\n"
                        "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è,\n"
                        "—É–∫–∞–∑–∞–≤ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞", reply_markup=inline.start_no_reg)
    else:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=reply.start)
        await message.answer("–≠—Ç–æ Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã\n"
                        "—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –¥–Ω–µ–≤–Ω–∏–∫–æ–º\n\n"
                        "–ë–æ—Ç —É–º–µ–µ—Ç:\n"
                        "1Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏\n"
                        "2Ô∏è‚É£ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
                        "3Ô∏è‚É£ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
                        "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

@disp.message(F.text == "/help")
async def command_help_handler(message: Message) -> None:
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫\n"
                         "–∞–¥–º–∏–Ω–∏–º—Ç—Ä–∞—Ç–æ—Ä—É, –ª–∏–±–æ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã\n"
                         "–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—É—Ç:\n\n"
                         "1Ô∏è‚É£ –ù–µ –Ω–∞—Ö–æ–¥–∏—Ç —à–∫–æ–ª—É\n"
                         "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, "
                         "—É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ —à–∫–æ–ª—ã\n\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã,\n"
                         "–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=inline.help_0)

#
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
#
@disp.message(F.text == "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def break_reg(message: Message, state: FSMContext) -> None:
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞",
                         reply_markup=reply.start_no_reg)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                         "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    await state.clear()

@disp.message(F.text == "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
async def additionally(message: Message) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    else:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏\n"
                            "–¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞, –ª–∏–±–æ\n"
                            "–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é", reply_markup=inline.additionally)

@disp.message(F.text == "–û—Ç—á—ë—Ç—ã")
async def reports_message(message: Message) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    else:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç—á—ë—Ç–∞", reply_markup=inline.reports)

@disp.message(F.text == "–î–Ω–µ–≤–Ω–∏–∫")
async def diary(message: Message) -> None:
    elements = await users.get_not_empty(message.chat.id)
    if len(elements) != 6:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    else:
        time1 = '(' + str(datetime.datetime.now().year) + ', ' + str(datetime.datetime.now().month) + ', ' + str(datetime.datetime.now().day) + ')'
        time = ((datetime.datetime.now().year)*366*12*31) + ((datetime.datetime.now().month)*12*31) + (datetime.datetime.now().day)
        year = await Lessons.get_year(message.chat.id)
        for day in year.split('$'):
            if len(day) > 10:
                last_time = '(' + day[day.index('(')+1:day.index(')')] + ')'
                timecorrect = last_time[1:-1].split(', ')
                timecorrect = (int(timecorrect[0])*366*12*31) + (int(timecorrect[1])*12*31) + int(timecorrect[2])
                if timecorrect >= time:
                    break
        day = day[day.index(')')+1:]
        diary = []
        for line in day.split('#'):
            if line[0] in ['1','2','3','4','5']:
                line = line[2:] + ': ' + line[0]
            diary.append(line.replace("6 ", ''))
        diary = '\n' + '\n'.join(diary)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{last_time}<"),
                    InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f"{last_time}>")
                ]
            ], resize_keyboard=True
        )
        await message.answer(f"~ üìó –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ {last_time[1:-1]} ~{diary}", reply_markup=keyboard)

#
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ inline callback
#
@disp.callback_query(F.data.in_({"reg"}))
async def callback_reg_handler(call: CallbackQuery, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if REG:
        await call.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω", reply_markup=reply.break_reg)
        await users.user_id(call.message.chat.id)
        await state.set_state(UserForm.login)

@disp.callback_query(F.data.in_({"user_form_login"}))
async def callback_user_form_login_handler(call: CallbackQuery, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
        await state.set_state(UserForm.login)

@disp.callback_query(F.data.in_({"user_form_password"}))
async def callback_user_form_password_handler(call: CallbackQuery, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        await state.set_state(UserForm.password)

@disp.callback_query(F.data.in_({"user_form_num_class"}))
async def callback_user_form_num_class_handler(call: CallbackQuery, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 9)")
        await state.set_state(UserForm.num_class)

@disp.callback_query(F.data.in_({"user_form_search_school_no"}))
async def callback_user_form_search_school_no_handler(call: CallbackQuery, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n—É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ\n—à–∫–æ–ª—ã")
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã")
        await state.set_state(UserForm.search_school)

@disp.callback_query(F.data.in_({"user_form_search_school_yes"}))
async def callback_user_form_search_school_yes_handler(call: CallbackQuery, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        msg = await call.message.edit_text("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        try:
            user_id, login, password, num_class, name_school = await users.get_not_empty(call.message.chat.id)
            await Lessons.get_data(user_id, login, password, name_school, URL)
            await users.enter(call.message.chat.id, ["ver", 1])
            await msg.edit_text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ!\n"
                                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
                                "–æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ")
            await call.message.answer("–ï—â—ë –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n"
                                      "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤ –º–µ–Ω—é\n"
                                      "–Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", reply_markup=reply.start)
        except:
            await msg.edit_text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ\n"
                                "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ", 
                                reply_markup=inline.start_no_reg)
            await users.remove(call.message.chat.id)
        await state.clear()

@disp.callback_query(F.data.in_({"help"}))
async def callback_help_handler(call: CallbackQuery) -> None:
    await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫\n"
                         "–∞–¥–º–∏–Ω–∏–º—Ç—Ä–∞—Ç–æ—Ä—É, –ª–∏–±–æ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã\n"
                         "–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—É—Ç:\n\n"
                         "1Ô∏è‚É£ –ù–µ –Ω–∞—Ö–æ–¥–∏—Ç —à–∫–æ–ª—É\n"
                         "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, "
                         "—É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ —à–∫–æ–ª—ã\n\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã,\n"
                         "–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=inline.help_0)

@disp.callback_query(F.data.in_({"help_input"}))
async def callback_help_input_handler(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
    await state.set_state(HelpForm.help_input)

@disp.callback_query(F.data.in_({"help_input_yes"}))
async def callback_help_input_yes_handler(call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    await bot.send_message(chat_id=ADMIN_GROUP, text=f"<code>{call.message.chat.id}</code> - {call.message.chat.first_name}", parse_mode=ParseMode.HTML)
    await bot.send_message(chat_id=ADMIN_GROUP, text=f"{call.message.text}"[21:])
    await call.message.edit_text("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")
    await state.clear()
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)

@disp.callback_query(F.data.in_({"help_input_no"}))
async def callback_help_input_no_handler(call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    await call.message.edit_text("–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)

@disp.callback_query(F.data.in_({"remove_user_data"}))
async def remove_user_data(call: CallbackQuery) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if REG:
        await users.remove(call.message.chat.id)
        await Lessons.remove(call.message.chat.id)
    await call.message.edit_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–Ω—ã")
    await call.message.answer("–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞", reply_markup=reply.start_no_reg)
    await call.message.answer("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏\n"
                              "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫\n"
                              "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                              reply_markup=inline.start_no_reg)

@disp.callback_query(F.data.in_({"–æ—Ç—á—ë—Ç—ã"}))
async def callback_reports_message(call: CallbackQuery) -> None:
    REG = len(await users.get_not_empty(call.message.chat.id)) == 6
    if not REG:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    else:
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç—á—ë—Ç–∞", reply_markup=inline.reports)

@disp.callback_query(F.data.in_({"–∏—Ç–æ–≥–∏", "–∏—Ç–æ–≥–∏ 1 –ø–æ–ª—É–≥–æ–¥–∏–µ", "–∏—Ç–æ–≥–∏ 2 –ø–æ–ª—É–≥–æ–¥–∏–µ", "–∏—Ç–æ–≥–∏ 1 —á–µ—Ç–≤–µ—Ä—Ç—å", "–∏—Ç–æ–≥–∏ 2 —á–µ—Ç–≤–µ—Ä—Ç—å", "–∏—Ç–æ–≥–∏ 3 —á–µ—Ç–≤–µ—Ä—Ç—å", "–∏—Ç–æ–≥–∏ 4 —á–µ—Ç–≤–µ—Ä—Ç—å"}))
async def callback_reports_1_message(call: CallbackQuery) -> None:
    elements = await users.get_not_empty(call.message.chat.id)
    if len(elements) != 6:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    else:
        year = await Lessons.get_year(call.message.chat.id)
        if call.data == "–∏—Ç–æ–≥–∏":
            period = define(int(elements[3]))
        else:
            period = str(call.data)[6:]
        if int(elements[3]) > 9:
            kb = inline.reports1
        else:
            kb = inline.reports2
        year = define_year(period, year)
        marks = {}
        for day in year.split('$'):
            if len(day) > 10:
                day = day[day.index(')')+1:]
                for lesson in day.split('#'):
                    if lesson[2:] in marks.keys():
                        if lesson[0] != '6':
                            marks[lesson[2:]] += lesson[0]
                    else:
                        marks[lesson[2:]] = ''
        result = ''
        for el in marks.keys():
            float_res = 0
            if len(marks.get(el)) >= 3:
                res = [int(i) for i in marks.get(el)]
                res = sum(res)/len(res)
                float_res = round(res, 2)
                if res % 1 >= 0.64:
                    res = int(str(res + 1)[:1])
                else:
                    res = int(str(res)[:1])
                result += '\n' + el + ": " + str(res) + ' (' + str(float_res) + ')'
            else:
                result += '\n' + el + ": –Ω/–∞"
        if len(marks.keys()) == 0:
            result = "\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        if call.message.text != f"üìÉ –û—Ç—á—ë—Ç {period}:{result}":
            await call.message.edit_text(f"üìÉ –û—Ç—á—ë—Ç {period}:{result}", reply_markup=kb)

@disp.callback_query()
async def callback_reports_2_and_diary_message(call: CallbackQuery) -> None:
    elements = await users.get_not_empty(call.message.chat.id)
    if len(elements) != 6:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–≤ –±–æ—Ç–µ, –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞\n–ø–æ–º–æ—â—å—é", reply_markup=inline.start_no_reg)
    else:
        year = await Lessons.get_year(call.message.chat.id)
        if "–ø–æ—É—Ä–æ—á–Ω–æ" in call.data:
            marks = {}
            for day in year.split('$'):
                if len(day) > 10:
                    time = day[1:day.index(')')]
                    day = day[day.index(')')+1:]
                    for lesson in day.split('#'):
                        if lesson[2:] in marks.keys():
                            if lesson[0] != '6':
                                marks[lesson[2:]] += lesson[:1] + " - " + time + '#'
                        else:
                            marks[lesson[2:]] = ''
            i = int(call.data[-2:])
            el = list(marks.keys())[i]
            if i+1 == len(marks.keys()):
                index0 = i-1
                index1 = 0
            elif i == 0:
                index0 = len(marks.keys()) - 1
                index1 = i+1
            else:
                index0 = i-1
                index1 = i+1
            data = '\n'.join(marks[el].split('#'))
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"–ø–æ—É—Ä–æ—á–Ω–æ {index0}"), 
                        InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"–ø–æ—É—Ä–æ—á–Ω–æ {index1}")
                    ],
                    [
                        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"–æ—Ç—á—ë—Ç—ã")
                    ]
                ], resize_keyboard=True
            )
            el = ' ' + el + ' '
            while len(el) < 24:
                el = '~' + el + '~'
            if not (('1' in data) or ('2' in data) or ('3' in data) or ('4' in data) or ('5' in data)):
                data = "~ –û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç ~\n"
            await call.message.edit_text(f"{el}\n\n{data}\n–£—Ä–æ–∫ - {i+1}", reply_markup=keyboard)
        else:   
            now_time = call.data[:-1]
            last_time = ''
            for day in year.split('$'):
                if len(day) > 10:
                    next_time = day[day.index('('):day.index(')')+1]
                    if ((last_time == now_time) and ('>' in call.data)) or ((next_time == now_time) and ('<' in call.data)):
                        day = day[day.index(')')+1:]
                        diary = []
                        for line in day.split('#'):
                            if line[0] in ['1','2','3','4','5']:
                                line = line[2:] + ': ' + line[0]
                            diary.append(line.replace("6 ", ''))
                        diary = '\n'.join(diary)
                        keyboard = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{last_time}<"),
                                    InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f"{next_time}>")
                                ]
                            ], resize_keyboard=True
                        )
                        await call.message.edit_text(f"~ üìó –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ {next_time[1:-1]} ~\n{diary}", reply_markup=keyboard)
                        break
                    last_time = next_time

#
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#
@disp.message(UserForm.login)
async def user_form_login(message: Message, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        await message.answer(f"–í–∞—à –ª–æ–≥–∏–Ω: {message.text}", reply_markup=inline.user_form_login)
        await users.enter(message.chat.id, ["login", message.text])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        await state.set_state(UserForm.password)

@disp.message(UserForm.password)
async def user_form_password(message: Message, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        await message.answer(f"–í–∞—à –ø–∞—Ä–æ–ª—å: {message.text}", reply_markup=inline.user_form_password)
        await users.enter(message.chat.id, ["pass", message.text])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 9)")
        await state.set_state(UserForm.num_class)

@disp.message(UserForm.num_class)
async def user_form_num_class(message: Message, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        num_class = re.findall("\d+", message.text)
        if num_class == []: num_class = ["1"]
        await message.answer(f"–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞: {num_class[0]}", reply_markup=inline.user_form_num_class)
        await users.enter(message.chat.id, ["num_class", num_class[0]])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã")
        await state.set_state(UserForm.search_school)

@disp.message(UserForm.search_school)
async def user_form_search_school(message: Message, state: FSMContext) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        school = search_school(message.text.lower(), URL)
        if school != None:
            await message.answer(f"{school}\n–í–∞—à–∞ —à–∫–æ–ª–∞?", reply_markup=inline.user_form_search_school)
            await users.enter(message.chat.id, ["name_school", school])
        else:
            school = "–¢–∞–∫–æ–π —à–∫–æ–ª—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å"
            await message.answer(f"{school}", reply_markup=inline.user_form_not_search)

@disp.message(HelpForm.help_input)
async def help_form_input(message: Message, state: FSMContext, bot: Bot) -> None:
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n{message.text}", reply_markup=inline.help_1)

@disp.callback_query(F.data.in_({"–æ—Ç—á—ë—Ç—ã"}))
async def callback_reports_message(call: CallbackQuery) -> None:
    REG = len(await users.get_not_empty(message.chat.id)) == 6
    if not REG:
        await call.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=inline.start_no_reg)
    else:
        await call.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç—á—ë—Ç–∞", reply_markup=inline.reports)

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    db_connect()
    bot = Bot(TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    polling = asyncio.create_task(disp.start_polling(bot, skip_updates=True))
    sp = asyncio.create_task(script(Bot(TOKEN)))
    await polling
    await sp

if __name__ == "__main__":
    asyncio.run(main())
